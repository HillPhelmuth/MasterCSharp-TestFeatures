@using System.Reflection
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@inject LazyAssemblyLoader AssemblyLoader
@inject AppState AppState
<Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true" AdditionalAssemblies="@_lazyLoadedAssemblies" OnNavigateAsync="@OnNavigateAsync">
    <Found Context="routeData">
        <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
            <Authorizing>
                <p>Determining session state, please wait...</p>
            </Authorizing>

            <NotAuthorized>
                <h1>Sorry</h1>
                <p>You're not authorized to reach this page. You need to log in.</p>
            </NotAuthorized>
        </AuthorizeRouteView>
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
    <Navigating>
        <div class="text-center">
            <h5>Heading that way</h5>
            <div class="lds-spinner">
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
            </div>
        </div>
    </Navigating>
</Router>


@code {
    private readonly List<Assembly> _lazyLoadedAssemblies = new();

    private async Task OnNavigateAsync(NavigationContext context)
    {
        switch (context.Path)
        {
            case "challenges":
            {
                var assemblies = await AssemblyLoader.LoadAssembliesAsync(new[] { "ChallengeModule.dll" });
                _lazyLoadedAssemblies.AddRange(assemblies);
                AppState.Title = "Challenges";
                break;
            }
            case "practice":
                AppState.Title = "Practice";
                break;
            case "analyze":
            {
                var assemblies = await AssemblyLoader.LoadAssembliesAsync(new[] { "CodeSyntaxModule.dll", "Blazor.Diagrams.dll", "Blazor.Diagrams.Core.dll", "SvgPathProperties.dll" });
                _lazyLoadedAssemblies.AddRange(assemblies);
                AppState.Title = "Syntax Tree";
                break;
            }
            default:
                AppState.Title = "Home";
                break;
        }
    }
}